# May09, 2021, ms
# idLegoBlock.py

# history
# legoBlockID.py

# USAGE
# python3 idLegoBlock.py --model_dir <model file dir generated by lobe>

# import the necessary packages
from imutils.video import VideoStream
from PIL import Image
import argparse
import cv2
import imutils
import os
import time

# place tflite_example.py in the same dir as this code
from my_tflite_example import TFLiteModel

# font will be used in the frame display window
font = cv2.FONT_HERSHEY_SIMPLEX

# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
# to get tf lite model dir
ap.add_argument("-m", "--model_dir", required=True,
                help="Path to tf model file dir.")
args = vars(ap.parse_args())  # <class 'dict'>

# model_file_dir
model_dir = args["model_dir"]

# load TFLiteModel object
model = TFLiteModel(model_dir)
model.load()
print('TFLiteModel loaded.')
print('So far, looks good.')

# initialize the video stream, allow the camera sensor to warm up,
# and initialize the total number of example faces written to disk
# thus far
print("[INFO] starting video stream...")
vs = VideoStream(src=0).start()
# vs = VideoStream(usePiCamera=True).start()
time.sleep(2.0)
total = 0

# loop over the frames from the video stream
while True:
    frame = vs.read()
    orig = frame.copy()
    frame = imutils.resize(frame, width=400)
    # frame = cv2.flip(frame, 1)
    # above is how to flip left and right. May01, 2021

    # convert frame into img
    # print('type of orig:', type(orig))  # <class 'numpy.ndarray'>
    # print('orig.size:', orig.size)
    # print('orig.shape:', orig.shape)
    # img = Image.open(orig)  # .open() takes file path, not array data
    img = Image.fromarray(orig)
    # print('img.size:', img.size)

    # then predict (google says infer)
    outputs = model.predict(img)
    # print(f"Predicted: {outputs}")
    result_list = outputs['predictions']
    print()
    for result in result_list:
        line = [result['label'], str(result['confidence'])]
        print(': '.join(line))

    block = result_list[0]['label']
    confidence = '{:.3f}'.format(result_list[0]['confidence'])
    cv2.putText(frame, str(block), (10, 290), font, 1, (255, 255, 255), 2)
    cv2.putText(frame, str(confidence), (200, 290), font, 1, (255, 255, 0), 1)
    # show the output frame
    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF

    # if the `q` key was pressed, break from the loop
    if key == ord("q"):
        break

    # time.sleep(2.0)

# do a bit of cleanup
print("[INFO] cleaning up...")
cv2.destroyAllWindows()
vs.stop()
